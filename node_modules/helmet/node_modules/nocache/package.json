{
  "name": "nocache",
  "author": {
    "name": "Adam Baldwin",
    "email": "baldwin@andyet.net",
    "url": "http://andyet.net/team/baldwin"
  },
  "contributors": [
    {
      "name": "Evan Hahn",
      "email": "me@evanhahn.com",
      "url": "http://evanhahn.com"
    }
  ],
  "description": "Middleware to destroy caching",
  "version": "0.1.0",
  "keywords": [
    "helmet",
    "security",
    "express",
    "connect",
    "nocache",
    "caching",
    "cache"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/helmetjs/nocache.git"
  },
  "bugs": {
    "url": "https://github.com/helmetjs/nocache/issues"
  },
  "scripts": {
    "test": "mocha"
  },
  "devDependencies": {
    "connect": "^3.3.1",
    "mocha": "^2.0.1",
    "supertest": "^0.14.0"
  },
  "readme": "# Middleware to turn off caching\n\nIt's possible that you've got bugs in an old HTML or JavaScript file, and with a cache, some users will be stuck with those old versions. This will (try to) abolish all client-side caching.\n\n```javascript\nvar nocache = require('nocache');\napp.use(nocache());\n```\n\nThis will set `Cache-Control` and `Pragma` headers to stop caching. It will also set an `Expires` header of 0, effectively saying \"this has already expired.\"\n\nIf you want to crush the `ETag` header as well, you can:\n\n```javascript\napp.use(nocache({ noEtag: true }));\n```\n\nCaching has some real benefits, and you lose them here. Browsers won't cache resources with this enabled, although *some* performance is retained if you keep ETag support. It's also possible that you'll introduce *new* bugs and you'll wish people had old resources cached, but that's less likely.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/helmetjs/nocache",
  "_id": "nocache@0.1.0",
  "dist": {
    "shasum": "0e543d0e22a062c76fc4e68e6167977e199017d4"
  },
  "_from": "nocache@0.1.0",
  "_resolved": "https://registry.npmjs.org/nocache/-/nocache-0.1.0.tgz"
}
